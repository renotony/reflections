What happens when you initialize a repository? Why do you need to do it?

  It creates all the "administrative overhead" for a repository.  It does not
  add any files to the repository or do anything other than create the frame-
  work necessary for the repository.  You need to do it so that GIT will have
  a "place" to keep track of the files you want to keep track of.

How is the staging area different from the working directory and the repository?
What value do you think it offers?

  The staging area is different from the working directory in that the staging
  area only contains what you have added to it - the working directory
  contains everything in the directory.  The staging area is different from
  the repository in that the repository contains all items that have been
  committed while the staging area only contains those items that have been
  added since the last commit.  This allows you to thoughtfully group your
  files within a directory which keeps you from having to create new
  directories for each group of files you want to work on.

How can you use the staging area to make sure you have one commit per logical
change?

  You can compare your staging area to the working directory and the most recent
  commit to identify the changes being made and to ensure you are committing
  one logical change at a time.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

  Branches would be helpful when you would like to experiment with new ideas
  that are not quite ready to be incorporated into a "final" version.  They
  can also be used to keep alternate "versions" of a file - perhaps in a
  different language.  Branches help keep your file history organized in
  these larger alternate versions.

How do the diagrams help you visualize the branch structure?

  Diagrams show the branch structure in a visual format that are also visible
  in the graphs - it is much easier to "see" what is happening to your "tree"
  when you have it diagrammed or graphed.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

  Once the reason for creating a second branch has been completed and the
  information in the file is ready to be combined with the main file,
  we will be ready to "merge" the two branches.  When they have merged,
  all the updates in both branches will "merge" together to create a single
  branch.  We represent it in the diagram to be able to visualize the sequence
  of commits that created the combined file.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually?

  There are times when it is obvious to Git how to merge file - when that
  happens it is very convenient to have Git merge them automatically.  If,
  on the other hand, Git cannot tell how the merge should go - it makes
  perfect sense to ask the user exactly what changes should remain in the
  final version.
